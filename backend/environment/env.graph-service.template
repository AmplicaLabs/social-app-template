# Copy this file to "<project_root>/.env.graph-service", and then tweak values for local development
# Values in this file will override the same-named environnent variables in `.env.common.docker` for the graph-service

# Max number of jobs allowed on the 'graphUpdateQueue' before
# blockchain scan will be paused to allow queue to drain
QUEUE_HIGH_WATER=1000

# Number of seconds to retain pending graph updates in the Redis cache to avoid redundant fetches from the chain
DEBOUNCE_SECONDS=10

# Maximum amount of provider capacity this app is allowed to use (per epoch)
#     type: 'percentage' | 'amount'
#     value: number (may be percentage, ie '80', or absolute amount of capacity)
CAPACITY_LIMIT='{"type":"percentage", "value":80}'

# Graph environment type. This can be 'Dev' or 'Rococo', 'TestnetPaseo', or 'Mainnet'.
GRAPH_ENVIRONMENT_TYPE=Dev

# [NOTE]: The following config is only used for Dev environments.
# Add the graph environment config in JSON format only used for Dev environments.
# Be careful to escape any inner quotes as this is in a .env file.
GRAPH_ENVIRONMENT_DEV_CONFIG='{
	"sdkMaxStaleFriendshipDays": 100,
	"maxPageId": 100,
	"dsnpVersions": [
	  "1.0"
	],
	"maxGraphPageSizeBytes": 100,
	"maxKeyPageSizeBytes": 100,
	"schemaMap": {
	  "1": {
		"dsnpVersion": "1.0",
		"connectionType": "follow",
		"privacyType": "public"
	  },
	  "2": {
		"dsnpVersion": "1.0",
		"connectionType": "follow",
		"privacyType": "private"
	  },
	  "3": {
		"dsnpVersion": "1.0",
		"connectionType": "friendship",
		"privacyType": "private"
	  }
	},
   "graphPublicKeySchemaId": 4
  }
  '
PROVIDER_ACCOUNT_SEED_PHRASE=//Alice

# Whether to instantiate/activate reconnection-service features
RECONNECTION_SERVICE_REQUIRED=false

### The following are only applicable if RECONNECTION_SERVICE_REQUIRED is 'true'

# Base URL for provider webhook endpoints
# WEBHOOK_BASE_URL=http://social-app-template-backend:3001/webhooks

# An optional bearer token authentication to the provider webhook
# PROVIDER_ACCESS_TOKEN=some-token

# Number of connection/page to request when requesting provider connections from webhook
# CONNECTIONS_PER_PROVIDER_RESPONSE_PAGE=100


# How many minutes to delay between successive scans of the chain
# for new accounts (after end of chain is reached)
# BLOCKCHAIN_SCAN_INTERVAL_MINUTES=1

# Number of failures allowing in the provider webhook before the service is marked down
# WEBHOOK_FAILURE_THRESHOLD=3

# Minimum number of consecutive successful calls to the provider webhook
# `/health` endpoint before it is marked up again
# HEALTH_CHECK_SUCCESS_THRESHOLD=10

# Number of seconds between provider webhook retry attempts when failing
# WEBHOOK_RETRY_INTERVAL_SECONDS=10

# Number of seconds to retry provider webhook `/health` endpoint when failing
# HEALTH_CHECK_MAX_RETRY_INTERVAL_SECONDS=10

# Number of `/health` endpoint failures allowed before marking the provider webhook service down
# HEALTH_CHECK_MAX_RETRIES=4
