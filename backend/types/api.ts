/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/assets': {
    /**
     * Upload and register new assets
     * @description Allows clients to upload new assets. This endpoint accepts multipart file uploads and returns the identifiers for the newly uploaded assets.
     */
    post: operations['postAssetsHandler'];
  };
  '/content': {
    /** Create a new post */
    post: operations['postContentHandler'];
  };
  '/auth/provider': {
    /** Return the delegation and provider information */
    get: operations['authProvider'];
  };
  '/auth/login': {
    /** Use Wallet Proxy to login */
    post: operations['authLogin2'];
  };
  '/auth/logout': {
    /** Logout and invalidate the access token */
    post: operations['authLogout'];
  };
  '/auth/account': {
    /** For polling to get the created account as authCreate can take time */
    get: operations['authAccount'];
  };
  '/content/{dsnpId}': {
    /** Get recent posts from a user, paginated */
    get: operations['getUserFeed'];
  };
  '/content/feed': {
    /** Get the Feed for the current user, paginated */
    get: operations['getFeed'];
  };
  '/content/discover': {
    /** Get the Discovery Feed for the current user, paginated */
    get: operations['getDiscover'];
  };
  '/content/create': {
    /** Create a new post */
    post: operations['createBroadcast'];
  };
  '/content/{dsnpId}/{contentHash}': {
    /** Get details of a specific post */
    get: operations['getContent'];
  };
  '/content/{type}/{contentHash}': {
    /** Edit the content of a specific post */
    put: operations['editContent'];
  };
  '/graph/{dsnpId}/following': {
    /** Get a list of users that a specific user follows */
    get: operations['userFollowing'];
  };
  '/graph/{dsnpId}/follow': {
    /** Follow a user */
    post: operations['graphFollow'];
  };
  '/graph/{dsnpId}/unfollow': {
    /** Unfollow a user */
    post: operations['graphUnfollow'];
  };
  '/profiles/{dsnpId}': {
    /** Get profile information for a specific user */
    get: operations['getProfile'];
    /** Create/Edit the profile information for a current user */
    put: operations['createProfile'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description Schema defining the request payload for uploading assets. Requires a list of files to upload. */
    UploadAssetRequest: {
      /** @description Array of files to be uploaded. Each file must be encoded in binary format. */
      files: string[];
    };
    /** @description Schema defining the response for a successful asset upload operation. Contains identifiers for all uploaded assets. */
    UploadAssetResponse: {
      /** @description Array of unique identifiers assigned to the uploaded assets. */
      assetIds: string[];
    };
    ProviderResponse: {
      nodeUrl: string;
      siwfUrl: string;
      /** @description IPFS Path Style Gateway base URI */
      ipfsGateway?: string;
      providerId: string;
      schemas: number[];
      /** @enum {string} */
      network: 'local' | 'testnet' | 'mainnet';
    };
    ChallengeResponse: {
      challenge: string;
    };
    LoginRequest: {
      /** @enum {string} */
      algo: 'SR25519';
      /** @enum {string} */
      encoding: 'hex';
      encodedValue: string;
      publicKey: string;
      challenge: string;
    };
    WalletLoginResponse: {
      accessToken: string;
      expires: number;
      dsnpId?: string;
      handle?: string;
    };
    WalletLoginRequest: {
      signIn?: {
        siwsPayload?: {
          message: string;
          signature: string;
        };
        error?: {
          message: string;
        };
      };
      signUp?: {
        extrinsics?: {
          pallet: string;
          extrinsicName: string;
          encodedExtrinsic: string;
        }[];
        error?: {
          message: string;
        };
      };
    };
    LoginResponse: {
      accessToken: string;
      expires: number;
      dsnpId: string;
    };
    CreateIdentityRequest: {
      addProviderSignature: string;
      /** @enum {string} */
      algo: 'SR25519';
      baseHandle: string;
      /** @enum {string} */
      encoding: 'hex';
      expiration: number;
      handleSignature: string;
      publicKey: string;
    };
    CreateIdentityResponse: {
      accessToken: string;
      expires: number;
    };
    AuthAccountResponse: {
      dsnpId: string;
      displayHandle?: string;
    };
    DelegateRequest: {
      /** @enum {string} */
      algo: 'SR25519';
      /** @enum {string} */
      encoding: 'hex';
      encodedValue: string;
      publicKey: string;
    };
    DelegateResponse: {
      accessToken: string;
      expires: number;
    };
    HandlesResponse: {
      publicKey: string;
      handle: string;
    };
    PaginatedBroadcast: {
      newestBlockNumber: number;
      oldestBlockNumber: number;
      posts: components['schemas']['BroadcastExtended'][];
    };
    BroadcastExtended: {
      fromId: string;
      contentHash: string;
      /** @description JSON-encoded Activity Content Note */
      content: string;
      /** @description Timestamp of the post */
      timestamp: string;
      /** @description Array of ReplyExtended objects */
      replies?: components['schemas']['ReplyExtended'][];
    };
    ReplyExtended: {
      fromId: string;
      contentHash: string;
      /** @description JSON-encoded Activity Content Note */
      content: string;
      /** @description Timestamp of the post */
      timestamp: string;
      /** @description Array of ReplyExtended objects */
      replies?: components['schemas']['ReplyExtended'][];
    };
    CreatePostRequestV2: {
      content: string;
      inReplyTo?: string;
      assets?: string[];
    };
    CreatePostRequest: {
      content: string;
      inReplyTo?: string;
      images?: string[];
    };
    EditPostRequest: {
      targetContentHash: string;
      targetAnnouncementType: number;
      content: string;
    };
    Profile: {
      fromId: string;
      contentHash: string;
      /** @description JSON-encoded Activity Content Note */
      content: string;
      /** @description Timestamp of the post */
      timestamp: string;
      displayHandle?: string;
    };
    EditProfileRequest: {
      content: string;
    };
  };
  responses: {
    /** @description Access token invalid or not found */
    UnauthorizedError: {
      content: never;
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /**
   * Upload and register new assets
   * @description Allows clients to upload new assets. This endpoint accepts multipart file uploads and returns the identifiers for the newly uploaded assets.
   */
  postAssetsHandler: {
    /** @description Payload containing the file(s) to upload. Each file must be in binary format. */
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['UploadAssetRequest'];
      };
    };
    responses: {
      /** @description Assets uploaded successfully. Returns identifiers for each uploaded asset. */
      202: {
        content: {
          'application/json': components['schemas']['UploadAssetResponse'];
        };
      };
      /** @description Bad Request. The request was invalid or cannot be served. Check the error message for details. */
      400: {
        content: never;
      };
      /** @description Unauthorized. The request requires user authentication. */
      401: {
        content: never;
      };
      /** @description Internal Server Error. An unexpected condition was encountered. */
      500: {
        content: never;
      };
      /** @description Service Unavailable. The server is currently unable to handle the request due to a temporary overloading or maintenance of the server. */
      503: {
        content: never;
      };
    };
  };
  /** Create a new post */
  postContentHandler: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePostRequestV2'];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['BroadcastExtended'];
        };
      };
      401: components['responses']['UnauthorizedError'];
    };
  };
  /** Return the delegation and provider information */
  authProvider: {
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['ProviderResponse'];
        };
      };
    };
  };
  /** Use Wallet Proxy to login */
  authLogin2: {
    requestBody: {
      content: {
        'application/json': components['schemas']['WalletLoginRequest'];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['WalletLoginResponse'];
        };
      };
    };
  };
  /** Logout and invalidate the access token */
  authLogout: {
    responses: {
      /** @description Successful response */
      201: {
        content: never;
      };
      401: components['responses']['UnauthorizedError'];
    };
  };
  /** For polling to get the created account as authCreate can take time */
  authAccount: {
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['AuthAccountResponse'];
        };
      };
      /** @description Account still pending creation */
      202: {
        content: never;
      };
      401: components['responses']['UnauthorizedError'];
    };
  };
  /** Get recent posts from a user, paginated */
  getUserFeed: {
    parameters: {
      query?: {
        newestBlockNumber?: number;
        oldestBlockNumber?: number;
      };
      path: {
        dsnpId: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['PaginatedBroadcast'];
        };
      };
      401: components['responses']['UnauthorizedError'];
    };
  };
  /** Get the Feed for the current user, paginated */
  getFeed: {
    parameters: {
      query?: {
        newestBlockNumber?: number;
        oldestBlockNumber?: number;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['PaginatedBroadcast'];
        };
      };
      401: components['responses']['UnauthorizedError'];
    };
  };
  /** Get the Discovery Feed for the current user, paginated */
  getDiscover: {
    parameters: {
      query?: {
        newestBlockNumber?: number;
        oldestBlockNumber?: number;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['PaginatedBroadcast'];
        };
      };
      401: components['responses']['UnauthorizedError'];
    };
  };
  /** Create a new post */
  createBroadcast: {
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['CreatePostRequest'];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['BroadcastExtended'];
        };
      };
      401: components['responses']['UnauthorizedError'];
    };
  };
  /** Get details of a specific post */
  getContent: {
    parameters: {
      path: {
        dsnpId: string;
        contentHash: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['BroadcastExtended'];
        };
      };
      401: components['responses']['UnauthorizedError'];
      /** @description Content not found */
      404: {
        content: never;
      };
    };
  };
  /** Edit the content of a specific post */
  editContent: {
    parameters: {
      path: {
        contentHash: string;
        /** @description Broadcast or Reply */
        type: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['EditPostRequest'];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['BroadcastExtended'];
        };
      };
      401: components['responses']['UnauthorizedError'];
    };
  };
  /** Get a list of users that a specific user follows */
  userFollowing: {
    parameters: {
      path: {
        dsnpId: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': string[];
        };
      };
      401: components['responses']['UnauthorizedError'];
    };
  };
  /** Follow a user */
  graphFollow: {
    parameters: {
      path: {
        dsnpId: string;
      };
    };
    responses: {
      /** @description Successful response */
      201: {
        content: never;
      };
      401: components['responses']['UnauthorizedError'];
    };
  };
  /** Unfollow a user */
  graphUnfollow: {
    parameters: {
      path: {
        dsnpId: string;
      };
    };
    responses: {
      /** @description Successful response */
      201: {
        content: never;
      };
      401: components['responses']['UnauthorizedError'];
    };
  };
  /** Get profile information for a specific user */
  getProfile: {
    parameters: {
      path: {
        dsnpId: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['Profile'];
        };
      };
      401: components['responses']['UnauthorizedError'];
    };
  };
  /** Create/Edit the profile information for a current user */
  createProfile: {
    parameters: {
      path: {
        dsnpId: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['EditProfileRequest'];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['Profile'];
        };
      };
      401: components['responses']['UnauthorizedError'];
    };
  };
}
